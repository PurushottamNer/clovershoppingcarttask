package com.clover.ServiceImpl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.clover.feignCleint.InventoryCleint;
import com.clover.repository.OrderRepository;
import com.clover.service.OrderService;

@Service
public class OrderServiceImpl implements OrderService {

	@Autowired
	private OrderRepository orderRepository;

	@Autowired
	private InventoryCleint inventoryClient;

//	@Autowired
//	private PaymentClient paymentClient;

	/**
	 * Create an order from the cart items.
	 *
	 * @param customerId   The ID of the customer placing the order.
	 * @param orderRequest The details of the order.
	 * @return True if the order was created successfully, false otherwise.
	 */
	public boolean createOrder(String customerId, OrderRequest orderRequest) {
		// Validate the request
		if (customerId == null || orderRequest == null || orderRequest.getCartItems() == null
				|| orderRequest.getCartItems().isEmpty()) {
			return false;
		}

		// Generate a unique order ID
		String orderId = UUID.randomUUID().toString();

		// Calculate the total amount for the order
		double totalAmount = 0.0;
		List<OrderItem> orderItems = new ArrayList<>();

		// For each item in the cart, create an order item
		for (CartItem cartItem : orderRequest.getCartItems()) {
			OrderItem orderItem = new OrderItem();
			orderItem.setOrderItemId(UUID.randomUUID().toString());
			orderItem.setProductId(cartItem.getProductId());
			orderItem.setProductName(cartItem.getProductName());
			orderItem.setQuantity(cartItem.getQuantity());
			orderItem.setUnitPrice(cartItem.getPriceOfCartItem());
			orderItem.setTotalPrice(cartItem.getTotalPriceOfCartItem());
			orderItems.add(orderItem);

			totalAmount += cartItem.getTotalPriceOfCartItem();

			// Update the inventory for each cart item
			inventoryClient.updateQuantityByProductIdAndInventoryId(cartItem.getProductId(),
					cartItem.getCartInventoryId(), cartItem.getQuantity() * -1); // Deduct the quantity from inventory
		}

		// Create the order
		Order order = new Order();
		order.setOrderId(orderId);
		order.setCustomerId(customerId);
		order.setOrderItems(orderItems);
		order.setTotalAmount(totalAmount);
		order.setPaymentStatus("PENDING");
		order.setOrderStatus("PENDING");
		order.setCreatedAt(new Date());
		order.setUpdatedAt(new Date());

		// Save the order to the database
		orderRepository.save(order);

		// Optionally, integrate with a payment service (if applicable)
		// paymentClient.initiatePayment(order);

		return true;
	}

}
