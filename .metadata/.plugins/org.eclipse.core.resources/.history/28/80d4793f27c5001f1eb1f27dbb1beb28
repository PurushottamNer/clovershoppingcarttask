package com.clover.ServiceImpl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.clover.feignCleint.CartClient;
import com.clover.feignCleint.InventoryCleint;
import com.clover.model.Cart;
import com.clover.model.CartItem;
import com.clover.model.Order1;
import com.clover.model.OrderItem;
import com.clover.repository.OrderRepository;
import com.clover.service.OrderService;

@Service
public class OrderServiceImpl implements OrderService {

	@Autowired
	private OrderRepository orderRepository;

	@Autowired
	private CartClient cartClient;

	@Autowired
	private InventoryCleint inventoryClient;

//	@Autowired
//	private PaymentClient paymentClient;

	public static String idGenerator() {
		String idGen = new SimpleDateFormat("yyyyMMddHHmmssSSS").format(new Date());
		return idGen;
	}

	@Override
	public boolean createOrder(String customerId, Order1 orderRequest) {
		if (customerId == null || orderRequest == null || orderRequest.getOrderItems() == null
				|| orderRequest.getOrderItems().isEmpty()) {
			return false;
		}

		boolean isUniqueIdFound = false;
		String uniqueId = "";
		while (!isUniqueIdFound) {
			uniqueId = "ORD" + OrderServiceImpl.idGenerator();
			if (orderRepository.findById(uniqueId).isEmpty()) {
				isUniqueIdFound = true;
			}
		}

		double totalAmount = 0.0;
		List<OrderItem> orderItems = new ArrayList<>();

		// For each order item, retrieve the corresponding cart items for the customer
		for (OrderItem orderItem : orderRequest.getOrderItems()) {
			List<Cart> listOfCarts = cartClient.getAllActiveCartsByCustomerId(customerId);

			for (Cart cart : listOfCarts) {
				for (CartItem cartItem : cart.getItems()) {
					// Check if this cart item matches the order item (this is a simple example,
					// adjust as needed)
					if (cartItem.getCartProductId().equals(orderItem.getProductId())) {
						// Set the order ID for this cart item (if applicable)
						boolean isUniqueIdFound1 = false;
						String uniqueId1 = "";
						while (!isUniqueIdFound1) {
							uniqueId1 = "ORI" + OrderServiceImpl.idGenerator();
							if (orderRepository.findById(uniqueId1).isEmpty()) {
								isUniqueIdFound1 = true;
							}
						}

						// Map the cart item to an order item
						OrderItem orderItem1 = new OrderItem();
						orderItem1.setOrderItemId(uniqueId1);
						orderItem1.setCartItemId(cartItem.getCartItemId());
						orderItem1.setProductId(cartItem.getCartProductId());
						orderItem1.setProductName(cartItem.getCartProductName());
						orderItem1.setQuantity(cartItem.getQuantity());
						orderItem1.setInventoryId(cartItem.getCartInventoryId());
						orderItem1.setUnitPrice(cartItem.getPriceOfCartItem());
						orderItem1.setTotalPrice(cartItem.getTotalPriceOfCartItem());
						orderItem1.setCreatedAt(new Date());
						orderItem1.setIsActive(true);
						orderItems.add(orderItem1);

						// Accumulate the total price for the order
						totalAmount += cartItem.getTotalPriceOfCartItem();

						// After processing this cart item, call the cart service to update the cart
						// Use Feign client to update only the specific fields based on cartProductId
						// and cartInventoryId
						cartClient.updateCartByOrderService(customerId, cartItem.getCartProductId(),
								cartItem.getCartInventoryId());
					}
				}
			}
		}

		// Create the order object with the updated order items and total amount
		Order1 order = new Order1();
		order.setOrderId(uniqueId);
		order.setCustomerId(customerId);
		order.setOrderItems(orderItems);
		order.setTotalAmount(totalAmount);
		order.setPaymentStatus("PENDING");
		order.setOrderStatus("PENDING");
		order.setCreatedAt(new Date());
		order.setShippingAddress(orderRequest.getShippingAddress());
		order.setPaymentMethod(orderRequest.getPaymentMethod());
		order.setTrackingNumber(orderRequest.getTrackingNumber());
		order.setDeliveryDate(new Date());
		order.setIsActive(true);

		// Save the order to the repository
		orderRepository.save(order);

		return true;
	}

}
