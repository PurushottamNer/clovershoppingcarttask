package com.clover.serviceImpl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.clover.converter.CatalogConverter;
import com.clover.dto.CatalogDTO;
import com.clover.model.Catalog;
import com.clover.repository.CatalogRepository;
import com.clover.service.CatalogService;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class CatalogServiceImpl implements CatalogService {

	@Autowired
	private CatalogRepository catalogRepository;

	@Autowired
	private CatalogConverter catalogConverter;

	private static final Logger logger = LoggerFactory.getLogger(CatalogServiceImpl.class);

	public static String idGenerator() {
		String idGen = new SimpleDateFormat("yyyyMMddHHmmssSSS").format(new Date());
		return idGen;
	}

	@Override
	public boolean addProduct(List<CatalogDTO> catalogDTOList) {
		try {
			logger.info("CatalogServiceImpl:addProducts execution started");

			if (catalogDTOList == null || catalogDTOList.isEmpty()) {
				logger.error("CatalogServiceImpl: Please provide valid data");
				return false;
			}

			List<Catalog> catalogs = new ArrayList<>();
			for (CatalogDTO catalogDTO : catalogDTOList) {
				Catalog catalog = catalogConverter.dtoToEntity(catalogDTO);

				boolean isUniqueIdFound = false;
				String uniqueId = "";
				while (!isUniqueIdFound) {
					uniqueId = "PRO" + CatalogServiceImpl.idGenerator();
					if (catalogRepository.findById(uniqueId).isEmpty()) {
						isUniqueIdFound = true;
					}
				}
				catalog.setProductId(uniqueId);
				catalog.setProductName(catalogDTO.getProductName());
				catalog.setProductDescription(catalogDTO.getProductDescription());
				catalog.setPrice(catalogDTO.getPrice());
				catalog.setCurrency(catalogDTO.getCurrency());
				catalog.setCategory(catalogDTO.getCategory());
				catalog.setAverageRating(catalogDTO.getAverageRating());
				catalog.setReviewCount(catalogDTO.getReviewCount());
				catalog.setBrand(catalogDTO.getBrand());
				catalog.setModelNumber(catalogDTO.getModelNumber());
				catalog.setDimensions(catalogDTO.getDimensions());
				catalog.setWeight(catalogDTO.getWeight());
				catalog.setColor(catalogDTO.getColor());
				catalog.setWarranty(catalogDTO.getWarranty());
				catalog.setCreatedAt(new Date());
				catalogs.add(catalog);
			}

			catalogRepository.saveAll(catalogs);

			logger.info("CatalogServiceImpl:addProducts execution completed successfully");
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("addProducts: Something went wrong", e.getMessage());
			return false;
		}
	}

	@Override
	public List<CatalogDTO> getAllProducts() {
		try {

			List<Catalog> listOfProducts = catalogRepository.findAll();
			List<CatalogDTO> catalogDtoList = new ArrayList<>();
			for (Catalog catalog : listOfProducts) {
				CatalogDTO catalogDto = catalogConverter.entityToDto(catalog);
				catalogDtoList.add(catalogDto);
			}
			return catalogDtoList;
		} catch (Exception e) {
			logger.error("service failed @getAllProducts() : " + e.getMessage());
			return null;
		}
	}

	@Override
	public boolean updateProductsByProductId(String productId, CatalogDTO catalogDto) {
		try {
			logger.info("CatalogServiceImpl:updateProductsByProductId execution started");

			// Check if productId is not null or blank
			if (productId != null && !productId.isBlank()) {

				// Find the Catalog by productId and check if it's active
				Catalog catalog = catalogRepository.findProductByProductIdAndIsActiveTrue(productId);

				if (catalog != null) {
					// Convert the DTO to the entity and update the catalog
					catalogConverter.dtoToEntity(catalogDto, catalog); // Assuming catalogConverter maps dto to entity
																		// correctly

					// Set the modified date to the current date
					catalog.setModifiedDate(new Date());

					// Save the updated catalog
					if (catalogRepository.save(catalog) != null) {
						logger.info("CatalogServiceImpl: Catalog updated successfully");
						logger.info("CatalogServiceImpl: updateProductsByProductId execution ended");
						return true;
					} else {
						logger.error("CatalogServiceImpl: Failed to update catalog");
						return false;
					}
				} else {
					logger.error("CatalogServiceImpl: Catalog not found for productId " + productId);
					return false;
				}
			} else {
				logger.error("CatalogServiceImpl: Provide a valid productId");
				return false;
			}
		} catch (Exception e) {
			logger.error("CatalogServiceImpl: Something went wrong while updating the catalog", e);
			return false;
		}
	}

}
